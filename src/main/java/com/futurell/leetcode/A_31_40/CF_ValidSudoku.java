package com.futurell.leetcode.A_31_40;

/**
 * @Description: 36. 有效的数独
 * @Author: lilei58
 * @Date: Created in 2021/7/15 6:29 下午
 * 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *  数字 1-9 在每一行只能出现一次。
 *  数字 1-9 在每一列只能出现一次。
 *  数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 * 示例 1：
 *  输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 *  输出：true
 *
 * 示例 2：
 *  输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 *  输出：false
 *  解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *       但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 */
public class CF_ValidSudoku {

    public static void main(String[] args) {
        char[][] board = {{'8', '3', '.', '.', '7', '.', '.', '.', '.'}
                         ,{'6', '.', '.', '1', '9', '5', '.', '.', '.'}
                         ,{'.', '9', '8', '.', '.', '.', '.', '6', '.'}
                         ,{'8', '.', '.', '.', '6', '.', '.', '.', '3'}
                         ,{'4', '.', '.', '8', '.', '3', '.', '.', '1'}
                         ,{'7', '.', '.', '.', '2', '.', '.', '.', '6'}
                         ,{'.', '6', '.', '.', '.', '.', '2', '8', '.'}
                         ,{'.', '.', '.', '4', '1', '9', '.', '.', '5'}
                         ,{'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

        boolean validSudoku = isValidSudoku(board);
        int i = 0;
    }

    /**
     *  思路: 使用数组存放条件
     * 1. 想清楚三个条件的判断,两个二维数组,一个三维数组
     * 2. 如何存放对应的值
     * 3. 如何判断该值是否重复
     */
    public static boolean isValidSudoku(char[][] board) {
        // 记录行
        int[][] row = new int[9][10];
        // 记录列
        int[][] col = new int[9][10];
        // 记录 3 * 3 小方块对应的位置
        int[][][] box = new int[3][3][10];
        // 循环行
        for (int i = 0; i < board.length; i++) {
            // 循环列
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                // 获取对应位置的值
                int num = board[i][j] - '0';
                // 判断行对应的位置,列对应的位置,以及该值在对应小方块的位置下标
                if (row[i][num] == 1 || col[j][num] == 1 || box[i / 3][j / 3][num] == 1) {
                    return false;
                }
                row[i][num] = 1;
                col[j][num] = 1;
                box[i / 3][j / 3][num] = 1;
            }
        }
        return true;
    }
}
